[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mining_reliability_db"
version = "1.0.0"
description = "Graph-based operational intelligence system for mining incident analysis with advanced causal intelligence"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Mining Reliability Engineering Team"}
]
keywords = ["mining", "reliability", "graph-database", "operational-intelligence", "causal-analysis"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Manufacturing",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "neo4j==5.28.1",
    "pandas==2.1.4",
    "numpy==1.26.4",
    "matplotlib==3.10.1",
    "seaborn==0.13.2",
    "python-dotenv==1.1.0",
    "pathlib",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.5",
    "pytest-cov==6.1.1",
    "black==25.1.0",
    "flake8==7.2.0",
    "mypy==1.15.0",
    "isort==6.0.1",
    "pylint==3.3.6",
]

analysis = [
    "jupyter==1.1.1",
    "ipykernel==6.29.5",
    "plotly==5.24.1",
    "networkx==3.4.2",
    "scikit-learn==1.6.1",
    "statsmodels==0.14.4",
]

production = [
    "gunicorn>=20.1.0",
    "psutil==7.0.0",
    "memory-profiler==0.61.0",
]

[project.scripts]
# Updated entry points for unified architecture
create-schema = "scripts.create_schema:main"
import-data = "scripts.import_data:main"
reset-db = "scripts.reset_db:main"

[project.urls]
Homepage = "https://github.com/mining-reliability/mining_reliability_db"
Documentation = "https://github.com/mining-reliability/mining_reliability_db/blob/main/README.md"
Repository = "https://github.com/mining-reliability/mining_reliability_db.git"
"Bug Tracker" = "https://github.com/mining-reliability/mining_reliability_db/issues"

[tool.setuptools]
packages = ["mine_core", "configs"]

[tool.setuptools.package-data]
configs = ["*.json"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests across modules",
    "database: Tests requiring Neo4j database",
    "performance: Performance and load tests",
]

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude auto-generated files
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "tests/",
    "build/",
    "dist/",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
]

[tool.pylint]
max-line-length = 88
disable = [
    "C0114",  # missing-module-docstring
    "R0903",  # too-few-public-methods
]

[tool.coverage.run]
source = ["mine_core"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
